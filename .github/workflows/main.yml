# .github/workflows/deploy.yml
name: Deploy to Server via SSH (robust)

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout source
      - uses: actions/checkout@v4

      # 2) Start ssh-agent & add key
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # -----------------------------------------------------------
      # 3) Add server fingerprint
      #    Option A: ignore failure with `|| true`
      # -----------------------------------------------------------
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          # try to fetch the host key (wait up to 30 s); ignore errors so the job doesn't abort
          ssh-keyscan -T 30 -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true
          echo "::group::known_hosts content"
          cat ~/.ssh/known_hosts
          echo "::endgroup::"

      # -----------------------------------------------------------
      # 4) Deploy
      # -----------------------------------------------------------
      - name: Deploy to server
        env:
          # Uncomment the line below and your secret if you use a custom port (e.g. 2222)
          # SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          # Add -p $SSH_PORT if you use a non‑standard port
          SSH_CMD="ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          # If custom port:
          # SSH_CMD="ssh -p $SSH_PORT -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"

          echo "### Connecting to server (verbose) ###"
          $SSH_CMD -vvv << 'EOF'
            set -euo pipefail

            echo "Remote host: $(hostname)"
            cd ${{ secrets.SSH_DIR }}

            echo "→ git reset & pull"
            git reset --hard
            git pull origin ${{ secrets.SSH_BRANCH }}

            echo "→ Installing deps"
            if [ -f package-lock.json ]; then
              npm ci
            elif [ -f yarn.lock ]; then
              yarn install --frozen-lockfile
            else
              npm install
            fi

            echo "→ Building project"
            npm run build

            echo "→ Restarting with PM2"
            pm2 reload ecosystem.config.js --only app \
              || pm2 start ecosystem.config.js --only app

            echo "✅ Deploy done at $(date)"
          EOF
